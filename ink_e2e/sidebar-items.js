window.SIDEBAR_ITEMS = {"attr":[["test","Defines an End-to-End test."]],"constant":[["LOG_PREFIX","This prefix will be used for log output. It is set by each `#[ink_e2e::test]` with the function name as String. This way it is possible to distinguish the lines in stdout and stderr, to still know which line belongs to which test."]],"enum":[["AccountKeyring","Set of test accounts."],["Error","An error occurred while interacting with the Substrate node."],["SubstrateConfig","Default set of commonly used types by Substrate runtimes."]],"fn":[["account_id","Get an ink! [`ink_primitives::AccountId`] for a given keyring account."],["alice","Returns the default [`sp_keyring::sr25519::Keyring`] for `//Alice`."],["bob","Returns the default [`sp_keyring::sr25519::Keyring`] for `//Bob`."],["build_message","Convenience method for building messages for the default environment."],["charlie","Returns the default [`sp_keyring::sr25519::Keyring`] for `//Charlie`."],["dave","Returns the default [`sp_keyring::sr25519::Keyring`] for `//Dave`."],["eve","Returns the default [`sp_keyring::sr25519::Keyring`] for `//Eve`."],["ferdie","Returns the default [`sp_keyring::sr25519::Keyring`] for `//Ferdie`."],["log_error","Writes `msg` to stderr."],["log_info","Writes `msg` to stdout."],["log_prefix","Returns the name of the test which is currently executed."],["one","Returns the default [`sp_keyring::sr25519::Keyring`] for `//One`."],["two","Returns the default [`sp_keyring::sr25519::Keyring`] for `//Two`."]],"macro":[["build","Builds a contract and imports its scaffolded structure as a module."]],"mod":[["utils",""]],"static":[["INIT","We use this to only initialize `env_logger` once."]],"struct":[["CallDryRunResult","Result of the dry run of a contract call."],["CallResult","Result of a contract call."],["Client","The `Client` takes care of communicating with the node."],["H256","Fixed-size uninterpreted hash type with 32 bytes (256 bits) size."],["InstantiationResult","Result of a contract instantiation."],["MessageBuilder","Build messages using a contract ref."],["PairSigner","A [`Signer`] implementation that can be constructed from an [`sp_core::Pair`]."],["UploadResult","Result of a contract upload."]],"type":[["PolkadotConfig","Default set of commonly used types by Polkadot nodes."],["Signer","Signer that is used throughout the E2E testing."]]};