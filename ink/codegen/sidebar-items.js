window.SIDEBAR_ITEMS = {"fn":[["deny_payment","Returns `Ok` if the caller did not transfer additional value to the callee."]],"mod":[["utils","Utility types and definitions used by the ink! codegen."]],"struct":[["DispatchInput","Used to check if `T` is allowed as ink! input parameter type."],["DispatchOutput","Used to check if `T` is allowed as ink! output parameter type."],["EventRespectsTopicLimit","Guards that an ink! event definitions respects the topic limit."],["EventTopics","Represents an the amount of topics for an ink! event definition."],["TraitMessagePayable","Used as `payable` property guard for ink! trait messages."],["TraitMessageSelector","Used as `selector` property guard for ink! trait messages."]],"trait":[["ContractCallBuilder","Used to refer to the generated contract call builder."],["EmitEvent","Allows for `self.env().emit_event(...)` syntax in ink! implementation blocks."],["Env","Simplifies interaction with the host environment via `self`."],["EventLenTopics","Stores the number of event topics of the ink! event definition."],["ImpliesReturn","Trait used as bound for the outputs of ink! trait definition messages."],["RespectTopicLimit","Guards that an amount of event topics respects the event topic limit."],["StaticEnv","Simplifies interaction with the host environment via `Self`."],["TraitCallBuilder","The global call builder type for an ink! trait definition."],["TraitCallForwarder","Implemented by the global trait info provider."],["TraitCallForwarderFor","Implemented by call builders of smart contracts."]]};